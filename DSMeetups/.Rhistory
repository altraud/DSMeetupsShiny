this.point.value + '</b> items on <br><b>' + this.series.yAxis.categories[this.point.y] + '</b>'; } !#")
# need to link additional JavaScript files here that do not ship with rCharts
p$addAssets(js =
c("https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js",
"https://code.highcharts.com/highcharts.js",
"https://code.highcharts.com/highcharts-more.js",
"https://code.highcharts.com/modules/exporting.js",
"https://code.highcharts.com/modules/heatmap.js"
)
)
p$set(dom="chart2")
p
View(dat)
dat[,3]=as.numeric(dat[,3])
dat
d2=unlist(df3)
namesvec=unique(df3[,1])
for(i in 1:length(namesvec)){}
for(i in 1:length(namesvec)){df3[which(df3[,1]==namesvec[i]),1]=(i-1); df3[which(df3[,2]==namesvec[i])]=(i-1)}
for(i in 1:length(namesvec)){df3[which(df3[,1]==namesvec[i]),1]=(i-1); df3[which(df3[,2]==namesvec[i]),2]=(i-1)}
df3
save(df3, namesvec, file="dc2data2.Rdata")
rm(list=ls())
load("dc2data.Rdata")
load("dc2data2.Rdata")
dat <- as.matrix(df3)
colnames(dat) <- c("x","y","value")
p <- Highcharts$new()
# use type='heatmap' for heat maps
p$chart(zoomType = "x", type = 'heatmap')
p$title(text='Membership Overlap in DC2 Meetups')
p$series(name = 'Members per Meetup',
data = toJSONArray2(dat, json=FALSE),
color = "#cccccc",
dataLabels = list(
enabled = TRUE,
color = 'black',
style = list(
textShadow = 'none',
HcTextStroke = NULL
)
))
p$xAxis(categories = namesvec)
p$yAxis(categories = namesvec)
# colorAxis is required for heat maps
p$addParams(colorAxis =
list(min = 0,
minColor='#FFFFFF',
maxColor='#7cb5ec'
)
)
p$legend(align='right',
layout='vertical',
margin=0,
verticalAlign='top',
y=25,
symbolHeight=320)
# custom tooltip
p$tooltip(formatter = "#! function() { return '<b>' + this.series.xAxis.categories[this.point.x] + '</b> sold <br><b>' +
this.point.value + '</b> items on <br><b>' + this.series.yAxis.categories[this.point.y] + '</b>'; } !#")
# need to link additional JavaScript files here that do not ship with rCharts
p$addAssets(js =
c("https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js",
"https://code.highcharts.com/highcharts.js",
"https://code.highcharts.com/highcharts-more.js",
"https://code.highcharts.com/modules/exporting.js",
"https://code.highcharts.com/modules/heatmap.js"
)
)
p$set(dom="chart2")
p
df3[,1]=as.numeric(df3[,1])
df3[,2]=as.numeric(df3[,2])
dat <- as.matrix(df3)
colnames(dat) <- c("x","y","value")
p <- Highcharts$new()
# use type='heatmap' for heat maps
p$chart(zoomType = "x", type = 'heatmap')
p$title(text='Membership Overlap in DC2 Meetups')
p$series(name = 'Members per Meetup',
data = toJSONArray2(dat, json=FALSE),
color = "#cccccc",
dataLabels = list(
enabled = TRUE,
color = 'black',
style = list(
textShadow = 'none',
HcTextStroke = NULL
)
))
p$xAxis(categories = namesvec)
p$yAxis(categories = namesvec)
# colorAxis is required for heat maps
p$addParams(colorAxis =
list(min = 0,
minColor='#FFFFFF',
maxColor='#7cb5ec'
)
)
p$legend(align='right',
layout='vertical',
margin=0,
verticalAlign='top',
y=25,
symbolHeight=320)
# custom tooltip
p$tooltip(formatter = "#! function() { return '<b>' + this.series.xAxis.categories[this.point.x] + '</b> sold <br><b>' +
this.point.value + '</b> items on <br><b>' + this.series.yAxis.categories[this.point.y] + '</b>'; } !#")
# need to link additional JavaScript files here that do not ship with rCharts
p$addAssets(js =
c("https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js",
"https://code.highcharts.com/highcharts.js",
"https://code.highcharts.com/highcharts-more.js",
"https://code.highcharts.com/modules/exporting.js",
"https://code.highcharts.com/modules/heatmap.js"
)
)
p$set(dom="chart2")
p
dat
p <- Highcharts$new()
# use type='heatmap' for heat maps
p$chart(zoomType = "x", type = 'heatmap')
p$title(text='Membership Overlap in DC2 Meetups')
p$series(name = 'Members per Meetup',
data = toJSONArray2(dat, json=FALSE),
color = "#cccccc",
dataLabels = list(
enabled = TRUE,
color = 'black',
style = list(
textShadow = 'none',
HcTextStroke = NULL
)
))
p$xAxis(categories = namesvec)
p$yAxis(categories = namesvec, title=list(text=""))
# colorAxis is required for heat maps
p$addParams(colorAxis =
list(min = 0,
minColor='#FFFFFF',
maxColor='#7cb5ec'
)
)
p$legend(align='right',
layout='vertical',
margin=0,
verticalAlign='top',
y=25,
symbolHeight=320)
# custom tooltip
p$tooltip(formatter = "#! function() { return '<b>' + this.series.xAxis.categories[this.point.x] + '</b> sold <br><b>' +
this.point.value + '</b> items on <br><b>' + this.series.yAxis.categories[this.point.y] + '</b>'; } !#")
# need to link additional JavaScript files here that do not ship with rCharts
p$addAssets(js =
c("https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js",
"https://code.highcharts.com/highcharts.js",
"https://code.highcharts.com/highcharts-more.js",
"https://code.highcharts.com/modules/exporting.js",
"https://code.highcharts.com/modules/heatmap.js"
)
)
p$set(dom="chart2")
p
p5 <- rPlot(x = 'x', y = 'y', color = 'value', data = df3, type = 'tile')
p5
dat2 = expand.grid(x = 1:5, y = 1:5)
dat2 = transform(dat2, value = rnorm(25))
df4=df3
df4[,1]=df4[,1]+1
df4[,2]=df4[,2]+1
p5 <- rPlot(x = 'x', y = 'y', color = 'value', data = df4, type = 'tile')
p5
p5 <- rPlot(x = 'bin(x,1)', y = 'bin(y,1)', color = 'value', data = df4, type = 'tile')
p5
p5 <- rPlot(x = 'bin(x,1)', y = 'bin(y,1)', color = 'value', data = df3, type = 'tile')
p5
p5$guides(x=list(labels=namesvec))
p5 <- rPlot(x = 'bin(x,1)', y = 'bin(y,1)', color = 'value', data = df3, type = 'tile')
p5$guides(x=list(labels=namesvec))
p5$guides(y=list(labels=namesvec))
p5
?rPlot
p5 <- rPlot(x = 'bin(x,1)', y = 'bin(y,1)', color = 'value', data = df3, type = 'tile', tooltip = "function(item){ return (item.value + 'in both' + '\n' + item.x + ' & ' + item.y )}")
p5$guides(x=list(labels=namesvec))
p5$guides(y=list(labels=namesvec))
p5
p5 <- rPlot(x = 'bin(x,1)', y = 'bin(y,1)', color = 'value', data = df3, type = 'tile', tooltip = "function(item){ return (item.value)}")
p5$guides(x=list(labels=namesvec))
p5$guides(y=list(labels=namesvec))
p5
p5 <- rPlot(x = 'bin(x,1)', y = 'bin(y,1)', color = 'value', data = df3, type = 'tile')
p5$guides(x=list(labels=namesvec, title=""))
p5$guides(y=list(labels=namesvec, title=""))
p5
p5 <- rPlot(x = 'bin(x,1)', y = 'bin(y,1)', color = 'value', data = df3, type = 'tile', title="Meetup Overlap")
p5$guides(x=list(labels=namesvec, title="", align="center"))
p5$guides(y=list(labels=namesvec, title="", align="center"))
p5
p5 <- rPlot(x = 'bin(x,1)', y = 'bin(y,1)', color = 'value', data = df3, type = 'tile', title="Meetup Overlap")
p5$guides(x=list(labels=namesvec, title="", align="center"))
p5$guides(y=list(labels=namesvec, title="", align="center"))
p5
runApp('Documents/ShinyApps/DSMeetups')
runApp('Documents/ShinyApps/DSMeetups')
p5 <- rPlot(x = 'bin(x,1)', y = 'bin(y,1)', color = 'value', data = df3, type = 'tile', "#! function(item){
return item.value}
!#")
p5$guides(x=list(labels=namesvec, title="", align="center"))
p5$guides(y=list(labels=namesvec, title="", align="center"))
p5$set(dom="chart2")
p5
p5 <- rPlot(x = 'bin(x,1)', y = 'bin(y,1)', color = 'value', data = df3, type = 'tile', tooltip= "#! function(item){
return item.value}
!#")
p5$guides(x=list(labels=namesvec, title="", align="center"))
p5$guides(y=list(labels=namesvec, title="", align="center"))
p5$set(dom="chart2")
p5
p5 <- rPlot(x = 'bin(x,1)', y = 'bin(y,1)', color = 'value', data = df3, type = 'tile', tooltip= "#! function(item){
return item.value}
!#")
p5$guides(x=list(labels=namesvec, title="", align="center"))
p5$guides(y=list(labels=namesvec, title="", align="center"))
p5$guides("{color: {scale: {type: gradient, lower: blue, upper: red}}}")
p5$set(dom="chart2")
p5
p5 <- rPlot(x = 'bin(x,1)', y = 'bin(y,1)', color = 'value', data = df3, type = 'tile', tooltip= "#! function(item){
return item.value}
!#")
p5$guides(x=list(labels=namesvec, title="", align="center"))
p5$guides(y=list(labels=namesvec, title="", align="center"))
p5$guides("{color: {scale: {type: gradient, lower: light blue, upper: red}}}")
p5$set(title = "Membership Overlap")
p5$set(dom="chart2")
p5
p5 <- rPlot(x = 'bin(x,1)', y = 'bin(y,1)', color = 'value', data = df3, type = 'tile', tooltip= "#! function(item){
return item.value}
!#")
p5$guides(x=list(labels=namesvec, title="", align="center"))
p5$guides(y=list(labels=namesvec, title="", align="center"))
p5$guides("{color: {scale: {type: gradient, lower: blue, upper: red}}}")
p5$set(title = "Membership Overlap")
p5$set(dom="chart2")
p5
p5 <- rPlot(x = 'bin(x,1)', y = 'bin(y,1)', color = 'value', data = df3, type = 'tile', tooltip= "#! function(item){
return item.value}
!#")
p5$guides(x=list(levels=namesvec, title="", align="center"))
p5$guides(y=list(levels=namesvec, title="", align="center"))
p5$guides("{color: {scale: {type: gradient, lower: blue, upper: red}}}")
p5$set(title = "Membership Overlap")
p5$set(dom="chart2")
p5
df4[,1]=namesvec[df4[,1]]
df4[,2]=namesvec[df4[,2]]
p5 <- rPlot(x = 'x', y = 'y', color = 'value', data = df4, type = 'tile', tooltip= "#! function(item){
return item.value}
!#")
p5$guides(x=list(levels=namesvec, title="", align="center"))
p5$guides(y=list(levels=namesvec, title="", align="center"))
p5$guides("{color: {scale: {type: gradient, lower: blue, upper: red}}}")
p5$set(title = "Membership Overlap")
p5$set(dom="chart2")
p5
p5 <- rPlot(x = 'x', y = 'y', color = 'value', data = df4, type = 'tile', tooltip= "#! function(item){
return item.value}
!#")
p5$guides(x=list(levels=namesvec, title="", numticks=9))
p5$guides(y=list(levels=namesvec, title="", numticks=9))
p5$guides("{color: {scale: {type: gradient, lower: blue, upper: red}}}")
p5$set(title = "Membership Overlap")
p5$set(dom="chart2")
return(p5)
p5
save(namesvec, df4, file="dc2data2.Rdata")
runApp('Documents/ShinyApps/DSMeetups')
runApp('Documents/ShinyApps/DSMeetups')
runApp('Documents/ShinyApps/DSMeetups')
runApp('Documents/ShinyApps/DSMeetups')
runApp('Documents/ShinyApps/DSMeetups')
runApp('Documents/ShinyApps/DSMeetups')
runApp('Documents/ShinyApps/DSMeetups')
runApp('Documents/ShinyApps/DSMeetups')
runApp('Documents/ShinyApps/DSMeetups')
runApp('Documents/ShinyApps/DSMeetups')
library(fitdistrplus)
spkdata=read.csv(file.choose(), header=F, stringsAsFactors = F, sep="\t")
spkoutlierscores=spkdata$V8
hist(spkoutlierscores, breaks=100)
hist(spkoutlierscores[spkoutlierscores>0], breaks=100)
hist(spkoutlierscores[spkoutlierscores>.5], breaks=100)
library(MASS)
?boxcox
spkoutlierscores2=boxcox(spkoutlierscores)
spkoutlierscores2=boxcox(spkoutlierscores~1)
spkoutlierscores2=boxcox(~1spkoutlierscores)
spkoutlierscores2=boxcox(1~spkoutlierscores)
spkoutlierscores2=boxcox((spkoutlierscores+.01)~1)
spkoutliersbc=boxcox((spkoutlierscores+.01)~1)
rm(spkoutlierscores2)
spkoutliersbc$x[which.max(spkoutliersbc$y)]
hist((spkoutlierscores+.01)^1.59596, breaks=100)
hist(((spkoutlierscores+.01)^1.59596)/1.59596, breaks=100)
descdist(spkoutlierscores)
descdist(spkoutlierscores, discrete = FALSE)
descdist(spkoutlierscores+.01, discrete = FALSE)
max(spkoutlierscores)
spkoutlierscores2=spkoutlierscores[!is.na(spkoutlierscores)]
descdist(spkoutlierscores2+.01, discrete = FALSE)
descdist(spkoutlierscores2, discrete = FALSE)
fitdist(spkoutlierscores2, distr=rbeta)
fitdist(spkoutlierscores2, distr="beta")
?fitdist
fitdist(spkoutlierscores2, "beta", method="mme")
fitdist(spkoutlierscores2, "beta", method="mge", gof="CvM")
vbeta=rbeta(1000, 4.04343, 1.359199)
hist(vbeta, breaks=100)
hist(spkoutlierscores2, breaks=100)
vbeta=rbeta(1000, 1.414546, 0.571058)
hist(vbeta, breaks=100)
hist(spkoutlierscores2, breaks=100)
rm(lis=ls())
rm(list=ls())
spkdata = read.csv(file.choose(), header=FALSE, stringsAsFactors = FALSE)
spkdata = read.csv(file.choose(), header=FALSE, stringsAsFactors = FALSE, sep="\t")
spkvec=spkdata$V8
hist(spkvec, breaks=100)
hist(spkvec, breaks=1000)
hist(spkvec)
library(fitdistrplus)
descdist(spkvec)
descdist(spkvec[spkvec>0])
spkvec[!is.na(spkvec)]
spkvec=spkvec[!is.na(spkvec)]
descdist(spkvec)
descdist(spkvec*100)
spkdist=fitdist(spkvec, "beta", method="qme")
spkdist=fitdist(spkvec, "beta", method="mle")
spkdist=fitdist(spkvec, "beta", method="mme")
spkdist
spkvecfit=rbeta(length(spkvec),0.7115082, 0.1868769)
hit(spkfit, breaks=100)
hist(spkfit, breaks=100)
hist(spkvecfit, breaks=100)
hist(spkvec, breaks=100)
length(which(spkvec>.9)
)
length(which(spkvec>.95))
length(which(spkvec>.99))
rphdata = read.csv(file.choose(), header=FALSE, sep="\t")
rphvec=rphdata$V7[!is.na(rphdata$V7)]
hist(rphvec, breaks=100)
descdist(rphvec)
uncdata = read.csv(file.choose(), header=FALSE, sep="\t")
uncvec=uncdata$V7[!is.na(uncdata$V7)]
hist(uncvec, breaks=100)
descdist(uncvec)
spkdist
spkdist$estimate
spkdist$estimate$shape1
spkdist$estimate[1]
source('~/getthreshbeta.R')
tspk=getthreshbeta(spkdata$V8)
tspk
trph=getthreshbeta(rphdata$V7)
source('~/getthreshbeta.R')
trph=getthreshbeta(rphdata$V7)
source('~/getthreshbeta.R')
trph=getthreshbeta(rphdata$V7)
trph
length(rphdata$V7>trph)
length(rphdata$V7)
length(which(rphdata$V7>trph))
source('~/getthreshbeta.R')
trph=getthreshbeta(rphdata$V7)
trph
source('~/getthreshbeta.R')
trph=getthreshbeta(rphdata$V7)
trph
unique(rphvec)
table(rphvec)
hist(spkvec)
hist(uncvec)
hist(uncvec, breaks=100)
hist(spk, breaks=100)
hist(spkvec, breaks=100)
dumdata=read.csv(file.choose(), header=FALSE, stringsAsFactors = FALSE, sep="\t")
dumvec=dumdata$V8[!is.na(dumdata$V8)]
hist(dumvec)
hist(dumvec, breaks=100)
ensdata=read.csv(file.choose(), header=FALSE, stringsAsFactors = FALSE, sep="\t")
hist(ensdata$V13, breaks=100)
table(ensdata$V13)
table(ensdata$V11)
table(ensdata$V12)
plot(ensdata$V11, ensdata$V13)
plot(ensdata$V8, ensdata$V9)
?leaflet
??leaflet
library(rCharts)
?addPolygons
??addPolygons
?leaflet
install.packages("rjson")
library(rjson)
json_data = fromJSON(file=file.choose())
save.image("netmapdata.Rdata")
n=(500000*288)
source('~/fcutoff.R')
c=fcutoff(n, 10, .01)
c
.01*n
.001*n
.0001*n
.00001*n
.000001*n
.0000001*n
.000001*n
c=fcutoff(n, 50, .000001)
c
source('~/fcutoff.R')
source('~/fcutoff.R')
c=fcutoff(n, 5, .000001)
c
source('~/fcutoff.R')
c=fcutoff(n, 5, .000001)
library(leaflet)
?addPopups
shiny::runApp('Documents/ShinyApps/DSMeetups')
runApp('Documents/ShinyApps/DSMeetups')
library(rCharts)
library(shiny)
library(maps)
library(leaflet)
load("data/dc2data.Rdata")
load("data/dc2data2.Rdata")
load("data/dc2data3.Rdata")
setwd("~/Documents/ShinyApps/DSMeetups")
library(rCharts)
library(shiny)
library(maps)
library(leaflet)
load("data/dc2data.Rdata")
load("data/dc2data2.Rdata")
load("data/dc2data3.Rdata")
mapStates <- map("state", fill = TRUE,
plot = FALSE,
region = as.character(statecountdf$wdsdcstates2))
statenames=mapStates$names
colvec=vector("character", length(statenames))
textvec=vector("character", length(statenames))
for(i in 1:length(statecountdf$wdsdcstates2)){
colvec[grep(statecountdf$wdsdcstates2[i], statenames)]=statecountdf$color[i]
textvec[grep(statecountdf$wdsdcstates2[i], statenames)]=paste(statecountdf$wdsdcstates[i], ":", "\n", as.character(statecountdf$Freq[i]), " Members", sep="")
}
your.map <- leaflet() %>%
addPolygons(data=mapStates, stroke = FALSE, col=colvec, popup=textvec) %>%
addLegend(position = 'bottomright', colors = col, labels = as.character(sort(cntu, decreasing = TRUE)), opacity = 0.4,
title = 'Members')
your.map
?leaflet
runApp()
colors("black")
colors()
runApp()
runApp()
?addPolygons
runApp()
runApp()
runApp()
install.packages("Hmisc")
runApp()
runApp()
runApp()
runApp()
?addPolygons
runApp()
runApp()
runApp()
?onRender
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?addPolygons
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sidebarMenu
runApp()
runApp()
runApp()
runApp()
